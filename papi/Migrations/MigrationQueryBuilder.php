<?php

declare(strict_types=1);

namespace papi\Migrations;

use papi\Migrations\Schema\SchemaDiffGenerator;

/**
 * Builds "queries to alter database to be up to date with current resource mapping
 * based on data generated by SchemaDiffGenerator
 */
class MigrationQueryBuilder
{
    private SchemaDiffGenerator $diffGenerator;

    public function __construct()
    {
        $this->diffGenerator = new SchemaDiffGenerator();
    }

    /**
     * Returns current code mapping information
     *
     * @return array|null
     */
    public function getCodeMappingArray(): ?array
    {
        return $this->diffGenerator->getCodeMapping()
                                   ->toArray()
            ;
    }

    /**
     * Converts SchemaDiffGenerator data into SQL queries
     *
     * @return array
     */
    public function getSqlStatements(): array
    {
        $statements = [];

        foreach ($this->diffGenerator->indexesToRemove as $key) {
            $statements[] = $this->dropIndex($key);
        }

        foreach ($this->diffGenerator->foreignKeysToRemove as $table => $keyNames) {
            foreach ($keyNames as $name => $options) {
                $statements[] = $this->dropFK($table, $name);
            }
        }

        foreach ($this->diffGenerator->columnsToRemove as $table => $columns) {
            foreach ($columns as $column) {
                $statements[] = $this->dropColumn($table, $column);
            }
        }

        foreach ($this->diffGenerator->tablesToRemove as $table) {
            $statements[] = $this->dropTable($table);
        }

        foreach ($this->diffGenerator->tablesToCreate as $table => $fields) {
            $statements[] = $this->createTable($table, $fields);
        }

        foreach ($this->diffGenerator->columnsToCreate as $table => $columns) {
            foreach ($columns as $column => $options) {
                $statements[] = $this->createColumn($table, $column, $options);
            }
        }

        foreach ($this->diffGenerator->columnsToChange as $table => $columns) {
            foreach ($columns as $column => $options) {
                $statements[] = $this->alterColumn($table, $column, $options);
            }
        }

        foreach ($this->diffGenerator->foreignKeysToCreate as $table => $keys) {
            foreach ($keys as $name => $options) {
                $statements[] = $this->createFK($table, $name, $options);
            }
        }

        foreach ($this->diffGenerator->indexesToCreate as $key) {
            $statements[] = $this->createIndex($key);
        }

        return $statements;
    }

    /**
     * Builds "create table query
     *
     * @param string $name
     * @param array  $fields
     *
     * @return string
     */
    private function createTable(
        string $name,
        array $fields
    ): string {
        $fieldsString = '';
        $lastField = array_key_last($fields);

        foreach ($fields as $field => $options) {
            $fieldsString .= "$field $options";
            if ($field !== $lastField) {
                $fieldsString .= ', ';
            }
        }

        return "create table $name($fieldsString)";
    }

    /**
     * Builds "drop table query
     *
     * @param string $name
     *
     * @return string
     */
    private function dropTable(
        string $name
    ): string {
        return "drop table $name";
    }

    /**
     * Builds "add column query
     *
     * @param string $table
     * @param string $name
     * @param string $options
     *
     * @return string
     */
    private function createColumn(
        string $table,
        string $name,
        string $options
    ): string {
        return "alter table $table add column $name $options";
    }

    /**
     * Builds "drop column" query
     *
     * @param string $table
     * @param string $name
     *
     * @return string
     */
    private function dropColumn(
        string $table,
        string $name
    ): string {
        return "alter table $table drop column $name";
    }

    /**
     * Builds "alter column" query
     *
     * @param string $table
     * @param string $name
     * @param string $options
     *
     * @return string
     */
    private function alterColumn(
        string $table,
        string $name,
        string $options
    ): string {
        return "alter table $table alter column $name type $options";
    }

    /**
     * Builds "add constraint foreign key" query
     *
     * @param string $table
     * @param string $name
     * @param string $options
     *
     * @return string
     */
    private function createFK(
        string $table,
        string $name,
        string $options
    ): string {
        return "alter table $table add constraint $table" . '_' . $name . "_fkey foreign key ($name) $options";
    }

    /**
     * Builds "drop constraint" query
     *
     * @param string $table
     * @param string $name
     *
     * @return string
     */
    private function dropFK(
        string $table,
        string $name
    ): string {
        return "alter table $table drop constraint $table" . '_' . $name . "_fkey";
    }

    /**
     * Builds "create index" query
     *
     * @param string $definition
     *
     * @return string
     */
    private function createIndex(
        string $definition
    ): string {
        return "create $definition";
    }

    /**
     * Builds "drop index" query
     *
     * @param string $definition
     *
     * @return string
     */
    private function dropIndex(
        string $definition
    ): string {
        $definition = str_ireplace('UNIQUE ', '', $definition);
        $name = explode(' ', $definition)[1];

        return "drop index $name";
    }
}
